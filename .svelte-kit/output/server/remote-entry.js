import{a as e,g as r,E as t,w as n,b as o,d as s,B as a,s as i}from"./chunks/event-state.js";import{parse as c}from"devalue";import{error as u,json as d}from"@sveltejs/kit";import{b as m,c as p,p as f}from"./chunks/environment.js";function h(t,n){if(!n)return e=>{void 0!==e&&u(400,"Bad Request")};if("unchecked"===t)return e=>e;if("~standard"in t)return async n=>{const o=e(),s=r(o),a=t["~standard"].validate,i=await a(n);return i.issues&&u(400,await s.handleValidationError({...i,event:o})),i.value};throw new Error('Invalid validator passed to remote function. Expected "unchecked" or a Standard Schema (https://standardschema.dev)')}function l(e,t,n,a){const i=r(n),c=o(e,s(t,i.transport));return(i.remote_data??={})[c]??=a()}function w(e){throw new Error(`Cannot use \`${e}\` from \`$app/server\` without the experimental flag set to true. Please set kit.experimental.remoteFunctions to \`true\` in your config.`)}async function y(e,r,o,s,a){const i={...e,[t]:e[t],setHeaders:()=>{throw new Error("setHeaders is not allowed in remote functions")},cookies:{...e.cookies,set:(t,n,o)=>{if(!r)throw new Error("Cannot set cookies in `query` or `prerender` functions");if(o.path&&!o.path.startsWith("/"))throw new Error("Cookies set in remote functions must have an absolute path");return e.cookies.set(t,n,o)},delete:(t,n)=>{if(!r)throw new Error("Cannot delete cookies in `query` or `prerender` functions");if(n.path&&!n.path.startsWith("/"))throw new Error("Cookies deleted in remote functions must have an absolute path");return e.cookies.delete(t,n)}},route:{id:null},url:new URL(e.url.origin)},c=await n(i,()=>s(o));return n(i,()=>a(c))}function v(t,n){w("command");const o=n??t,s=h(t,n),a={type:"command",id:"",name:""},i=t=>{const i=e();if(!i.isRemoteRequest)throw new Error(`Cannot call a command (\`${a.name}(${n?"...":""})\`) during server-side rendering`);r(i).refreshes??={};const c=Promise.resolve(y(i,!0,t,s,o));return c.updates=()=>{throw new Error(`Cannot call '${a.name}(...).updates(...)' on the server`)},c};return Object.defineProperty(i,"__",{value:a}),i}function b(t){return w("form"),function n(o){const s={method:"POST",onsubmit:()=>{}};Object.defineProperty(s,"enhance",{value:()=>({action:s.action,method:s.method,onsubmit:s.onsubmit})});const a={type:"submit",onclick:()=>{}};Object.defineProperty(a,"enhance",{value:()=>({type:"submit",formaction:s.buttonProps.formaction,onclick:()=>{}})}),Object.defineProperty(s,"buttonProps",{value:a});const i={type:"form",name:"",id:"",fn:async n=>{const o=e(),s=r(o);s.refreshes??={};const a=await y(o,!0,n,e=>e,t);return o.isRemoteRequest||((s.remote_data??={})[i.id]=a),a}};return Object.defineProperty(s,"__",{value:i}),Object.defineProperty(s,"action",{get:()=>`?/remote=${i.id}`,enumerable:!0}),Object.defineProperty(a,"formaction",{get:()=>`?/remote=${i.id}`,enumerable:!0}),Object.defineProperty(s,"result",{get(){try{const{remote_data:t}=r(e());return t?.[i.id]}catch{return}}}),null==o&&Object.defineProperty(s,"for",{value:t=>{const o=r(e());let s=(o.form_instances??=new Map).get(t);return s||(s=n(t),s.__.id=`${i.id}/${encodeURIComponent(JSON.stringify(t))}`,s.__.name=i.name,o.form_instances.set(t,s)),s}}),s}()}function g(t,n,f){w("prerender");const v="function"==typeof n?n:void 0,b=f??(v?void 0:n),g=v??t,_=h(t,v),$={type:"prerender",id:"",name:"",has_arg:!!v,inputs:b?.inputs,dynamic:b?.dynamic},k=t=>{const n=(async()=>{const n=e(),f=r(n),h=s(t,f.transport),w=$.id,v=`${m}/${p}/remote/${w}${h?`/${h}`:""}`;if(!f.prerendering&&!a&&!n.isRemoteRequest)try{return await l(w,t,n,async()=>{const e=await fetch(new URL(v,n.url.origin).href);if(!e.ok)throw new Error("Prerendered response not found");const r=await e.json();return"error"===r.type&&u(r.status,r.error),(f.remote_data??={})[o(w,h)]=r.result,function(e,r){const t={};for(const n in r)t[n]=r[n].decode;return c(e,t)}(r.result,f.transport)})}catch{}if(f.prerendering?.remote_responses.has(v))return f.prerendering.remote_responses.get(v);const b=l(w,t,n,()=>y(n,!1,t,_,g));f.prerendering&&f.prerendering.remote_responses.set(v,b);const k=await b;if(f.prerendering){const e={type:"result",result:i(k,f.transport)};f.prerendering.dependencies.set(v,{body:JSON.stringify(e),response:d(e)})}return k})();return n.catch(()=>{}),n};return Object.defineProperty(k,"__",{value:$}),k}function _(t,n){w("query");const a=n??t,i=h(t,n),c={type:"query",id:"",name:""},u=t=>{if(f)throw new Error(`Cannot call query '${c.name}' while prerendering, as prerendered pages need static data. Use 'prerender' from $app/server instead`);const n=e(),u=l(c.id,t,n,()=>y(n,!1,t,i,a));return u.catch(()=>{}),u.refresh=async()=>{const n=e(),a=r(n),i=a?.refreshes;if(!i)throw new Error(`Cannot call refresh on query '${c.name}' because it is not executed in the context of a command/form remote function`);i[o(c.id,s(t,a.transport))]=await u},u.withOverride=()=>{throw new Error(`Cannot call '${c.name}.withOverride()' on the server`)},u};return Object.defineProperty(u,"__",{value:c}),u}export{v as command,b as form,g as prerender,_ as query};
